// new Handler programming model stuff all goes in here


interface PathExpression {
  readonly expression: string
}

interface Action {

}

interface TreeNode {

}
interface RootMatch<R extends TreeNode> {
  readonly child: R
}

interface Handler {
  readonly name: string
  readonly description: string
  readonly expression: string | PathExpression
  readonly tags?: string[]
  handle(root: RootMatch<TreeNode>): ExecutionPlan
}


class StringAction implements Action {
  constructor(readonly name: string){}
}

class ExecutionPlan {
   items: (Command | Action) [];
   addAction(action: string | Action){
     if(typeof action == 'string'){
       this.items.push(new StringAction(action))
     }else{
        this.items.push(action);
     }
     return this;
   }
   addCommand(command: Command) {
     this.items.push(command)
     return this;
   }
}

interface Command {
  readonly name: string
  readonly parameters: Object[]
}

interface Message {
  readonly text: string
  readonly channel: string
}

export {Handler, RootMatch, ExecutionPlan}

//specific stuff
export let ClosedIssues: PathExpression = {
  expression: "/issue[.state()='open']"
}

export interface MatchedIssue extends TreeNode{
  reassignTo(person: string): Command
}

// export let simple: Handler = {
//   name: "SimpleIssueHandler",
//   expression: ClosedIssues,
//   description: "Blah",
//   handle(root: RootMatch<MatchedIssue>){
//     let plan = new ExecutionPlan()
//     return plan.addCommand(root.child.reassignTo("syvain"))
//   }
// }
