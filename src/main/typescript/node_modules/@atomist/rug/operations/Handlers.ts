// new Handler programming model stuff all goes in here


interface PathExpression {
  readonly expression: string
}

interface Action {
  name: string
  params: Object
}

interface TreeNode {

}
interface Event<R extends TreeNode> {
  readonly child: R
}

interface Handler {
  readonly name: string
  readonly description: string
  readonly expression: string | PathExpression
  readonly tags?: string[]
  handle(root: Event<TreeNode>): ExecutionPlan
}


class StringAction implements Action {
  constructor(readonly name: string, readonly params: Object){}
}

class ExecutionPlan {
   private items: (Command | Action) [];
   public addAction(action: Action) : ExecutionPlan;
   public addAction(action: string, params: Object) : ExecutionPlan
   public addAction(action: string | Action, params?: Object) : ExecutionPlan{
     if(typeof action == 'string'){
        this.items.push(new StringAction(action,params))
     }else{
       this.items.push(action)
     }
     return this;
   }

   public addCommand(command: Command) {
     this.items.push(command)
     return this;
   }
}

interface Command {
  readonly name: string
  readonly parameters: Object[]
}

interface Message {
  readonly text: string
  readonly channel: string
}

export {Handler, Event, ExecutionPlan}

//specific stuff
export let ClosedIssues: PathExpression = {
  expression: "/issue[.state()='open']"
}

export class AssignIssue implements Action {
  params: {}
  name: "AssignIssue"

}

export interface Issue extends TreeNode{
  reassignTo(person: string): Command
}

class SimpleHandler implements Handler{
  name: string = "Simple"
  expression: string = ""
  description: string = ""
  handle(event: any) : ExecutionPlan {
    return
  }
}

export let simple: Handler = {
  name: "SimpleIssueHandler",
  expression: ClosedIssues,
  description: "Blah",
  handle(event: Event<Issue>){
    let issue = event.child
    return new ExecutionPlan()
      .addCommand(issue.reassignTo("syvain"))
      //.addAction(new AssignIssue().withLabel("bug").whatever("blah"))
  }
}
